[
    {
        "name": "",
        "meta": "start",
        "body": "<p>Subjects so far include the <t>static file</t>, <t>JS</t>, especially <t>Node.js</t>, <t>Docker</t>, the <t>environment</t> and the <t>shell</t>.</p><p>More to follow.</p><p>The raw <t>JSON</t> for these notes can be accessed directly <b><a href=\"https://raw.githubusercontent.com/barcek/notes/master/entries.json\">here</a></b> or downloaded using a <t>CLI</t> tool like <code>curl</code>.</p><code class=\"text--block\"><span class=\"text--block text--vsmall\">shell (Unix-like)</span><span class=\"code--kw\">curl</span> <span class=\"code--fl\">-O</span> <span class=\"code--id\">https://raw.githubusercontent.com/barcek/notes/master/entries.json</span></code><p>This command creates a file named <span class=\"text--mono\">entries.json</span> in the current <t>directory</t>.</p>"
    },

    {
        "name": "Create a package.json file (npm/Node.js)",
        "meta": "",
        "body": "<p>A <span class=\"text--mono\">package.json</span> file can be used to store information on a JavaScript (<t>JS</t>) <t>module</t>.</p><p>Although it can list <t>npm</t> <t>package</t>s installed as dependencies, it is not required in order to use them.</p><p>If npm is installed, a <span class=\"text--mono\">package.json</span> can be created by running the command <code>npm init</code> in the <t>shell</t>.</p><p>This prints a series of prompts, each for one <t>key</t> in the <t>JSON</t> file. The given default or an empty string can be selected with the <kbd>Enter</kbd> key or an alternative provided.</p><p>The prompts can be skipped and the defaults applied using the <code>-y</code> or <code>--yes</code> <t>flag</t>.</p><code class=\"text--block\"><span class=\"text--block text--vsmall\">shell</span><span class=\"code--kw\">npm</span> <span class=\"code--kw\">init</span> <span class=\"code--fl\">-y</span></code><p>The <span class=\"text--mono\">name</span> and <span class=\"text--mono\">version</span> keys are the minimum required.</p><p>A package.json file can also be created independently.</p><p>In <t>Node.js</t>, the <span class=\"text--mono\"><t>JSON.stringify</t></span> <t>method</t> can be used with the file system module (<span class=\"text--mono\"><t>fs</t></span>) to convert an <t>object</t> with suitable keys and save it under the correct name.</p><ul><li><a href=\"https://docs.npmjs.com/creating-a-package-json-file\">'Creating a package.json file', npm Docs</a></li></ul>"
    },

    {
        "name": "Get an environment variable in Docker Compose",
        "meta": "",
        "body": "<p>A <span class=\"text--mono\"><t>docker-compose.yml</t></span> file can make use of <t>environment variable</t>s, including those set in a <t>.env</t> file located in the same <t>directory</t>.</p><p>A placeholder containing the variable name, e.g. <code>${VAR_NAME}</code>, is placed where the value is required.</p><code class=\"text--block\"><span class=\"text--block text--vsmall\">docker-compose.yml</span><span class=\"code--kw\">services</span>:<br>    <span class=\"code--id\">service-name</span>:<br>        <span class=\"code--kw\">container_name</span>: <span class=\"code--id\">svc-nm</span><br>        <span class=\"code--kw\">environment</span>:<br>            <span class=\"code--id\">VAR_NAME</span>: $<span class=\"code--dl\">{</span><span class=\"code--id\">VAR_NAME</span><span class=\"code--dl\">}</span></code><ul><li><a href=\"https://docs.docker.com/compose/environment-variables/\">'Environment variables in Compose', Docker Docs</a></li></ul>"
    },

    {
        "name": "Get an environment variable in Node.js",
        "meta": "",
        "body": "<p>In <t>Node.js</t>, an <t>environment variable</t> can be accessed on <code><t>process.env</t></code>.</p><code class=\"text--block\"><span class=\"text--block text--vsmall\">Node.js</span><span class=\"code--kw\">const</span> <span class=\"code--id\">mode</span> <span class=\"code--op\">=</span> <span class=\"code--kw\">process</span><span class=\"code--dl\">.</span><span class=\"code--kw\">env</span><span class=\"code--dl\">.</span><span class=\"code--id\">NODE_ENV</span><span class=\"code--dl\">;</span></code><p><code><t>NODE_ENV</t></code> is used to set the mode in which a program should run, whether '<t>development</t>' or '<t>production</t>'.</p><p>If the environment has many variables, <t>destructuring</t> could be used to <t>assign</t> several at once.</p><code class=\"text--block\"></span><span class=\"code--kw\">const</span> <span class=\"code--dl\">{</span> <span class=\"code--id\">NODE_ENV</span><span class=\"code--dl\">,</span> <span class=\"code--id\">PORT</span> <span class=\"code--dl\">}</span> <span class=\"code--op\">=</span> <span class=\"code--kw\">process</span><span class=\"code--dl\">.</span><span class=\"code--kw\">env</span><span class=\"code--dl\">;</span></code><p>Environment variables can be set in a <span class=\"text--mono\"><t>.env</t></span> file and <t>import</t>ed via the package <span class=\"text--mono\"><t>dotenv</t></span>. For a larger project, a <span class=\"text--mono\"><t>config</t></span> file or folder could also be created to manage them.</p><p>Both approaches are used in <a href=\"https://github.com/barcek/docNxgres\"><span class=\"text--mono\">docNxgres</span></a>.</p><ul><li><a href=\"https://nodejs.org/api/process.html#process_process_env\"><code>process.env</code>, Node.js documentation</a></li></ul>"
    },

    {
        "name": "Install or uninstall a package with npm",
        "meta": "",
        "body": "<p>A <t>package</t> for <t>Node.js</t> can be installed via <t>npm</t>.</p><p>Installation uses the <code>install</code> or <code>i</code> command followed by any <t>flag</t>s and one or more package names, each separated by a space.</p><code class=\"text--block\"><span class=\"text--block text--vsmall\">shell</span><span class=\"code--kw\">npm</span> <span class=\"code--kw\">install</span> <span class=\"code--id\">package</span><span class=\"code--op\">-</span><span class=\"code--id\">name1</span> <span class=\"code--id\">package</span><span class=\"code--op\">-</span><span class=\"code--id\">name2</span></code><p>This installs locally, in the directory in which the command was run. Global installation uses the <code>--global</code> or <code>-g</code> flag.</p><code class=\"text--block\"><span class=\"code--kw\">npm</span> <span class=\"code--kw\">install</span> <span class=\"code--fl\">-g</span> <span class=\"code--id\">package</span><span class=\"code--op\">-</span><span class=\"code--id\">name1</span> <span class=\"code--id\">package</span><span class=\"code--op\">-</span><span class=\"code--id\">name2</span></code><p>Once installed globally, many packages can be installed locally offline.</p><p>If a package is for development only, it can be installed as a devDependency with the <code>--save-dev</code> or <code>-D</code> flag.</p><p>The full list of packages installed can be seen in the <span class=\"text--mono\"><t>package.json</t></span> file.</p><p>Each can be uninstalled with the <code>uninstall</code> command, with a global flag if required.</p><ul><li><a href=\"https://docs.npmjs.com/packages-and-modules/getting-packages-from-the-registry\">'Getting packages from the registry', npm Docs</a></li></ul>"
    },

    {
        "name": "Return a constructor function instance asynchronously (JS)",
        "meta": "",
        "body": "<p>In JavaScript (<t>JS</t>), a <t>constructor function</t> returns an <t>instance</t> with no need for the <code>return</code> <t>keyword</t>. Using <code>return</code> overrides this behaviour, forfeiting the instance.</p><p>However, to perform a task <t>asynchronous</t>ly within a function and delay the provision of a final value, it is common to return a <t>promise</t> resolving to that value.</p><p>To await the completion of an asynchronous task while still returning the instance, the following uses an immediately-invoked function expression (<t>IIFE</t>).</p><code class=\"text--block\"><span class=\"code--kw\">return</span> <span class=\"code--dl\">(</span><span class=\"code--kw\">async</span> <span class=\"code--kw\">function</span><span class=\"code--dl\">(</span><span class=\"code--id\">instance<span class=\"code--dl\">)</span> <span class=\"code--dl\">{</span>\n    <span class=\"code--kw\">await</span> <span class=\"code--id\">instance</span><span class=\"code--dl\">.</span><span class=\"code--id\">performTask</span><span class=\"code--dl\">();</span>\n    <span class=\"code--kw\">return</span> <span class=\"code--id\">instance</span><span class=\"code--dl\">;</span>\n<span class=\"code--dl\">})(</span><span class=\"code--kw\">this</span><span class=\"code--dl\">);</span></code><p>This approach is used in the <span class=\"text--mono\">Table</span> module of <a href=\"https://github.com/barcek/progpgQ\"><span class=\"text--mono\">progpgQ</span></a>.</p>"
    },

    {
        "name": "Serve static files in Express.js (Node.js)",
        "meta": "",
        "body": "<p><t>Express.js</t> is a flexible <t>HTTP</t> <t>server</t> <t>framework</t> for <t>Node.js</t>.</p><p>Its <code>static</code> method is used to specify a <t>directory</t> in which the server can find <t>static file</t>s requested by a <t>client</t> (e.g. <t>browser</t>).</p><p>A simple static file server can be written in a few lines of code. Although intended as an example, the code below supports extension by using the <span class=\"text--mono\"><t>path</t></span> <t>module</t> to manage cross-platform path <t>separator</t>s, declaring a <code>PORT</code> <t>constant</t> rather than hardcoding the value and referencing an <t>environment variable</t>.</p><code class=\"text--block\"><span class=\"text--block text--vsmall\">app.js</span><span class=\"code--kw\">const</span> <span class=\"code--id\">path</span> <span class=\"code--op\">=</span> <span class=\"code--kw\">require</span><span class=\"code--dl\">(</span><span class=\"code--vl\">'path'</span><span class=\"code--dl\">)</span><span class=\"code--dl\">;</span><br><span class=\"code--kw\">const</span> <span class=\"code--id\">express</span> <span class=\"code--op\">=</span> <span class=\"code--kw\">require</span><span class=\"code--dl\">(</span><span class=\"code--vl\">'express'</span><span class=\"code--dl\">)</span><span class=\"code--dl\">;</span><br><span class=\"code--kw\">const</span> <span class=\"code--id\">app</span> <span class=\"code--op\">=</span> <span class=\"code--id\">express</span><span class=\"code--dl\">(</span><span class=\"code--dl\">)</span><span class=\"code--dl\">;</span><br><span class=\"break--semi\"></span><span class=\"code--kw\">const</span> <span class=\"code--id\">PORT</span> <span class=\"code--op\">=</span> <span class=\"code--kw\">process</span><span class=\"code--dl\">.</span><span class=\"code--kw\">env</span><span class=\"code--dl\">.</span><span class=\"code--id\">PORT</span> <span class=\"code--op\">||</span> <span class=\"code--vl\">3000</span><span class=\"code--dl\">;</span><br><span class=\"break--semi\"></span><span class=\"code--id\">app</span><span class=\"code--dl\">.</span><span class=\"code--id\">use</span><span class=\"code--dl\">(</span><span class=\"code--id\">express</span><span class=\"code--dl\">.</span><span class=\"code--id\">static</span><span class=\"code--dl\">(</span><span class=\"code--id\">path</span><span class=\"code--dl\">.</span><span class=\"code--id\">resolve</span><span class=\"code--dl\">(</span><span class=\"code--kw\">__dirname</span><span class=\"code--dl\">,</span> <span class=\"code--vl\">'public'</span><span class=\"code--dl\">)</span><span class=\"code--dl\">)</span><span class=\"code--dl\">)</span><span class=\"code--dl\">;</span><br><span class=\"break--semi\"></span><span class=\"code--id\">app</span><span class=\"code--dl\">.</span><span class=\"code--id\">listen</span><span class=\"code--dl\">(</span><span class=\"code--id\">PORT</span><span class=\"code--dl\">,</span> <span class=\"code--dl\">(</span><span class=\"code--dl\">)</span> <span class=\"code--dl\">=></span> <span class=\"code--dl\">{</span><br>    <span class=\"code--kw\">console</span><span class=\"code--dl\">.</span><span class=\"code--kw\">log</span><span class=\"code--dl\">(</span><span class=\"code--vl\">`Listening on port ${PORT}...`</span><span class=\"code--dl\">)</span><span class=\"code--dl\">;</span><br><span class=\"code--dl\">}</span><span class=\"code--dl\">)</span><span class=\"code--dl\">;</span></code><p>The above uses the <t>CommonJS</t> module syntax. With ECMAScript Module (<t>ESM</t>) syntax, the first two lines would instead be the following.</p><code class=\"text--block\"><span class=\"code--kw\">import</span> <span class=\"code--id\">path</span> <span class=\"code--kw\">from</span> <span class=\"code--vl\">'path'</span><span class=\"code--dl\">;</span><br><span class=\"code--kw\">import</span> <span class=\"code--id\">express</span> <span class=\"code--kw\">from</span> <span class=\"code--vl\">'express'</span><span class=\"code--dl\">;</span></code><p>If the directory is <t>npm</t> <t>initialize</t>d and the <t>express</t> <t>package</t> is installed, this server can be run with the command <code>node app.js</code>. Once running, the <t>process</t> can be ended with <kbd>Ctrl</kbd>-<kbd>C</kbd>.</p><p>An <span class=\"text--mono\"><t>index.html</t></span> file placed in the <span class=\"text--mono\">public</span> folder could then be viewed in a browser at <code><t>localhost</t>:8080</code>.</p><p>The following minimal directory structure is assumed. The <span class=\"text--mono\">node_modules</span> folder and <span class=\"text--mono\"><t>package</t></span> files are generated by npm.</p><code class=\"text--block\">./server_dir<br>├── app.js<br>├── node_modules/<br>├── package.json<br>├── package-lock.json<br>└── public/<br>    └── index.html</code><p>Note, however, that static files are often served not from an <t>application</t> server, but from a <t>reverse proxy server</t> such as <t>Nginx</t>. This allows the application server to be more fully focused on core application logic and improves overall <t>performance</t>.</p><ul><li><a href=\"https://www.npmjs.com/package/express\">express at npm</a></li><li><a href=\"http://expressjs.com/\">expressjs.com</a></li></ul>"
    },

    {
    	"name": "Set an environment variable in the shell (terminal/CLI)",
    	"meta": "",
    	"body": "<p>On <t>Linux</t> and other <t>Unix-like</t> systems, an <t>environment variable</t> can be set in the <t>shell</t> with the <code>export</code> command.</p><code class=\"text--block\"><span class=\"text--block text--vsmall\">shell (Unix-like)</span><span class=\"code--kw\">export</span> <span class=\"code--id\">VAR_NAME</span><span class=\"code--op\">=</span><span class=\"code--vl\">value</span></code><p>Enclosing quotation marks are required for a value with spaces.</p><code class=\"text--block\"><span class=\"code--kw\">export</span> <span class=\"code--id\">VAR_NAME</span><span class=\"code--op\">=</span><span class=\"code--vl\">\"value with spaces\"</span></code><p>A variable set in this way is inherited by <t>child process</t>es. It is valid for one shell session only, but persists if the assignment is added to the <span class=\"text--mono\"><t>.bashrc</t></span> file in the <t>home directory</t>. A change can be applied by restarting the shell.</p><p>On <t>Windows</t> systems, in <t>PowerShell</t>, an environment variable can be set with <code>$env:</code>.</p><code class=\"text--block\"><span class=\"text--block text--vsmall\">PowerShell</span><span class=\"code--kw\">$env</span>:<span class=\"code--id\">VAR_NAME1</span> <span class=\"code--op\">=</span> <span class=\"code--vl\">value</span><br><span class=\"code--kw\">$env</span>:<span class=\"code--id\">VAR_NAME2</span> <span class=\"code--op\">=</span> <span class=\"code--vl\">'value with spaces'</span></code><p>Environment variables can also be set in a <span class=\"text--mono\"><t>.env</t></span> file acting as a single source of truth, to be <t>import</t>ed elsewhere.</p>"
    },

    {
        "name": "Understand the shell (terminal/CLI)",
        "meta": "",
        "body": "<p>A <t>shell</t> is a program allowing the user to interact with a computer system.</p><p>It can receive user input and send output via a textual interface called a terminal. The terminal was once a piece of hardware, but is now often a window in the graphical user interface (<t>GUI</t>).</p><p>The terms console and command line interface (CLI) are also used.</p><p>A common shell on <t>Linux</t> and other <t>Unix-like</t> systems is <t>Bash</t>, and on <t>Windows</t> <t>PowerShell</t>.</p><p>A terminal can be opened with the key combination <kbd>Ctrl</kbd>-<kbd>Alt</kbd>-<kbd>T</kbd> on at least some Linux <t>distros</t> and with <kbd>Win</kbd>+<kbd>i</kbd> on at least some versions of Windows.</p><p>Much can be accomplished with several basic <t>shell command</t>s, while multiple commands can be grouped into shell <t>script</t>s to simplify tasks. Programs installed on a system may provide additional commands, e.g. <t>npm</t>.</p><p>The <t>Python</t> programming language is also commonly used for <t>scripting</t>, allowing a single script to be run on different <t>operating system</t>s.</p>"
    },

    {
        "name": "Understand the static file (HTML/CSS/JS+)",
        "meta": "",
        "body": "<p>A static file is a code file ready to be used by a <t>client</t> (e.g. <t>browser</t>), complete or almost complete, enough to provide a good user experience.</p><p>It needs no further input from the <t>server</t> before being sent to the client. However, it may contain references to other files required when first downloaded and links to other resources.</p><p>A key instance is an <span class=\"text--mono\"><t>index.html</t></span> file with the basic structure of an initial web page. This may reference one or more <t>CSS</t> <t>stylesheet</t>s, <t>JavaScript</t> (<t>JS</t>) files, <t>font</t> files or <t>image</t>s and link to other pages.</p><p>Often a server prepares an <span class=\"text--mono\">index.html</span> or other <span class=\"text--mono\">html</span> file from a <t>template</t>, inserting information before sending it to the client. <t>Templating language</t>s include <t>Pug</t> (formerly Jade) and <t>EJS</t>.</p><p>Static files are often stored on the server in a <t>directory</t> named <span class=\"text--mono\">static</span> or <span class=\"text--mono\">public</span>.</p>"
    },

    {
        "name": "Use a .env file",
        "meta": "",
        "body": "<p>One or more <t>environment variable</t>s can be set in a <span class=\"text--mono\"><t>.env</t></span> file.</p><p>A <span class=\"text--mono\">.env</span> file can act as a single source of truth and its contents can be imported by other code, e.g. the package <span class=\"text--mono\"><t>dotenv</t></span>.</p><p>Prefixed with a dot (a so-called <t>dotfile</t>), the file is hidden on <t>Linux</t> and other <t>Unix-like</t> systems. In the <t>shell</t>, it can be listed with other files using the <code>-a</code> <t>flag</t>.</p><code class=\"text--block\"><span class=\"text--block text--vsmall\">shell (Unix-like)</span><span class=\"code--kw\">ls</span> <span class=\"code--fl\">-a</span></code><p>The variables are set as key-value pairs.</p><code class=\"text--block\"><span class=\"text--block text--vsmall\">.env</span><span class=\"code--id\">VAR_NAME1</span><span class=\"code--op\">=</span><span class=\"code--vl\">value</span><br><span class=\"code--id\">VAR_NAME2</span><span class=\"code--op\">=</span><span class=\"code--vl\">\"value with spaces\"</span></code>"
    },

    {
        "name": "Use basic shell commands (terminal/CLI; Unix-like)",
        "meta": "",
        "body": "<p>Much can be done with several basic <t>shell</t> commands.</p><h2>Navigating & creating (<code>ls</code>, <code>cd</code>, <code>mkdir</code>, <code>touch</code>, <code>echo</code>)</h2><ul><li><code><b>ls</b></code>: lists the files and folders in the current <t>directory</t></li><li><code><b>cd</b> dest_dir</code>: changes location, to a destination directory named <span class=\"text--mono\">dest_dir</span>; the destination can be nested inside another, e.g. <code>cd outer_dir/dest_dir</code></li><li><code><b>mkdir</b> new_dir</code>: creates a new directory named <span class=\"text--mono\">new_dir</span>; the new can be nested, e.g. <code>mkdir outer_dir/new_dir</code></li><li><code><b>touch</b> new.file</code>: creates a new file named <span class=\"text--mono\">new.file</span>; as usual, it can be nested</li><li><code><b>echo</b> content</code>: prints <span class=\"text--mono\">content</span>, either to the terminal or to a file using <code>></code> to overwrite or <code>>></code> to append, e.g. <code>echo \"Appended content.\" >> existing.file</code> (enclosing quotation marks are required for a value with spaces)</li></ul><p>Consider the following commands, chained with <code>&&</code> to run one after the other.</p><code class=\"text--block\"><span class=\"text--block text--vsmall\">shell (Unix-like)</span><span class=\"code--kw\">mkdir</span> <span class=\"code--id\">new_dir</span> && <span class=\"code--kw\">cd</span> <span class=\"code--id\">new_dir</span> && <span class=\"code--kw\">touch</span> <span class=\"code--id\">new.file</span> && <span class=\"code--kw\">echo</span> <span class=\"code--vl\">\"New content.\"</span> <span class=\"code--op\">></span> <span class=\"code--id\">new.file</span> <span class=\"code--op\">&&</span> <span class=\"code--kw\">cd</span> <span class=\"code--op\">..</span> <span class=\"code--op\">&&</span> <span class=\"code--kw\">ls</span></code><p>These create a new directory, move down one level into it, create a new file there, print content to the file, and, with <code>cd ..</code>, move up one level, back to the starting directory, before listing its contents.</p><p>They could be shortened to the following.</p><code class=\"text--block\"><span class=\"code--kw\">mkdir</span> <span class=\"code--id\">new_dir</span> && <span class=\"code--kw\">echo</span> <span class=\"code--vl\">\"New content.\"</span> <span class=\"code--op\">></span> <span class=\"code--id\">new_dir<span class=\"code--dl\">/</span>new.file</span> <span class=\"code--op\">&&</span> <span class=\"code--kw\">ls</span></code><h2>Viewing & editing (<code>cat</code>, <code>nano/vi/emacs</code>)</h2><ul><li><code><b>cat</b> existing.file</code>: prints the contents of <span class=\"text--mono\">existing.file</span> to the screen</li><li><code><b>nano</b>/<b>vi</b>/<b>emacs</b> existing.file</code>: opens <span class=\"text--mono\">existing.file</span> in a text editor, either <span class=\"text--mono\"><t>nano</t></span>, <span class=\"text--mono\"><t>vim</t></span> or <span class=\"text--mono\"><t>emacs</t></span>; availability varies; <span class=\"text--mono\">nano</span> and <span class=\"text--mono\">vim</span> use basic <t>shell key combination</t>s</li></ul><h2>Copying, moving & renaming (<code>cp</code>, <code>mv</code>)</h2><ul><li><code><b>cp</b> first.file dest_dir</code>: copies <span class=\"text--mono\">first.file</span> to <span class=\"text--mono\">dest_dir</span>, overwriting any existing file with the same name in that directory</li><li><code><b>mv</b> first.file dest_dir/second.file</code>: moves <span class=\"text--mono\">first.file</span> to <span class=\"text--mono\">dest_dir</span>, renaming it <span class=\"text--mono\">second.file</span> and overwriting any other with that name there; <code>mv first.file second.file</code> renames the file in place</li></ul><h2>Removing (<code>rm</code>)</h2><ul><li><code><b>rm</b> existing.file</code>: deletes <span class=\"text--mono\">existing.file</span> with no means of recovery; take care</li></ul><p>The <code>-r</code> flag allows for a more powerful approach.</p><ul><li><code><b>rm -r</b> existing_dir</code>: deletes <span class=\"text--mono\">existing_dir</span> and all files and folders inside it, recursively - at every level of nesting - with no means of recovery; take great care</li></ul><p>These can be practised in an otherwise empty directory.</p>"
    },

    {
        "name": "Use CommonJS or ECMAScript Modules (ESM) in Node.js",
        "meta": "",
        "body": "<p>By default, <t>Node.js</t> assumes that files with the <span class=\"text--mono\">.js</span> extension use the <t>CommonJS</t> module syntax, which includes the <code>require</code> and <code>module.exports</code> <t>methods</t>.</p><p>As at Node.js <span class=\"text--mono\">v16.0.0</span>, the ECMAScript Module (<t>ESM</t>) syntax - which includes the <code>import</code> and <code>export</code> <t>keyword</t>s - can be used instead by one of the following means:</p><ul><li>using the <span class=\"text--mono\">.mjs</span> file extension in place of <span class=\"text--mono\">.js</span>;</li><li>ensuring that the <code>\"type\": \"module\"</code> <t>key-value pair</t> is present in the <span class=\"text--mono\"><t>package.json</t></span> file for the project.</li></ul><p>If the <code>type</code> key in the <span class=\"text--mono\">package.json</span> file is set to <code>module</code>, any CommonJS files can be given the <span class=\"text--mono\">.cjs</span> extension.</p><p>Conversely, if the <code>type</code> key is set to  <code>commonjs</code>, ESM files can be given the <span class=\"text--mono\">.mjs</span> extension.</p><ul><li><a href=\"https://nodejs.org/api/packages.html#packages_modules_packages\">Modules: Packages, Node.js documentation</a></li></ul>"
    },


    {
        "name": "Use promises with the Node.js file system module (fs)",
        "meta": "",
        "body": "<p>The <t>Node.js</t> file system <t>module</t> (<span class=\"text--mono\"><t>fs</t></span>) includes an API allowing <t>ES6</t> JavaScript (<t>JS</t>) <t>promise</t>s to be used.</p><p>It was first made available with v10.0.0, and from v14.0.0 is included via <code>'fs/promises'</code>.</p><p>The following uses the <t>CommonJS</t> module syntax.</p><code class=\"text--block\"><span class=\"text--block text--vsmall\">.js</span><span class=\"code--kw\">const</span> <span class=\"code--id\">fs</span> <span class=\"code--op\">=</span> <span class=\"code--kw\">require</span><span class=\"code--dl\">(</span><span class=\"code--vl\">'fs/promises'</span><span class=\"code--dl\">)</span><span class=\"code--dl\">;</span></code><p>The following uses ECMAScript Module (<t>ESM</t>) syntax.</p><code class=\"text--block\"><span class=\"code--kw\">import</span> <span class=\"code--op\">*</span> <span class=\"code--kw\">as</span> <span class=\"code--id\">fs</span> <span class=\"code--kw\">from</span> <span class=\"code--vl\">'fs/promises'</span><span class=\"code--dl\">;</span></code><p>There is no need to supply a <t>callback</t>. Instead the <code><t>.then</t></code> syntax or <code><t>await</t></code> <t>keyword</t> can be used as preferred.</p><code class=\"text--block\"><span class=\"code--kw\">try</span> <span class=\"code--dl\">{</span>\n    <span class=\"code--id\">result</span> <span class=\"code--op\">=</span> <span class=\"code--kw\">await</span> <span class=\"code--id\">fs</span><span class=\"code--dl\">.</span><span class=\"code--id\">readFile</span><span class=\"code--dl\">(</span><span class=\"code--id\">path</span><span class=\"code--dl\">);</span>\n<span class=\"code--dl\">}</span> <span class=\"code--kw\">catch</span> <span class=\"code--dl\">(</span><span class=\"code--id\">err</span><span class=\"code--dl\"><span class=\"code--dl\">)</span></span> <span class=\"code--dl\">{</span>\n    <span class=\"code--cm\">\/\/ ...</span></code><p>The <span class=\"text--mono\"><t>util</t></span> module also includes a <code><t>promisify</t></code> method.</p><ul><li><a href=\"https://nodejs.org/api/fs.html#fs_promises_api\">Promises API, File system, Node.js documentation</a></li></ul>"
    },

    {
        "name": "Use the dotenv package in Node.js",
        "meta": "",
        "body": "<p>The <span class=\"text--mono\">dotenv</span> package is used to import <t>environment variable</t>s from a <span class=\"text--mono\"><t>.env</t></span> file into <t>Node.js</t> code.</p><p>It can be installed via <t>npm</t> or <t>yarn</t>.</p><p>It is required in the code as usual and its <code>config</code> method is called.</p><code class=\"text--block\"><span class=\"text--block text--vsmall\">Node.js</span><span class=\"code--kw\">require</span><span class=\"code--dl\">(</span><span class=\"code--vl\">'dotenv'</span><span class=\"code--dl\">)</span><span class=\"code--dl\">.</span><span class=\"code--id\">config</span><span class=\"code--dl\">(</span><span class=\"code--dl\">)</span><span class=\"code--dl\">;</span></code><p>A variable set in the <span class=\"text--mono\">.env</span> file can then be accessed on <code>process.env</code>.</p><code class=\"text--block\"><span class=\"code--kw\">const</span> <span class=\"code--id\">mode</span> <span class=\"code--op\">=</span> <span class=\"code--kw\">process</span><span class=\"code--dl\">.</span><span class=\"code--kw\">env</span><span class=\"code--dl\">.</span><span class=\"code--id\">NODE_ENV</span><span class=\"code--dl\">;</span></code><ul><li><a href=\"https://www.npmjs.com/package/dotenv\">dotenv at npm</a></li></ul>"
    }
]
